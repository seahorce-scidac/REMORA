AMREX_HOME      ?= $(ROMSX_HOME)/Submodules/AMReX

BL_NO_FORT = TRUE

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

EBASE = ROMSX
USE_RPATH = TRUE

ROMSX_SOURCE_DIR = $(ROMSX_HOME)/Source
include $(ROMSX_SOURCE_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_SOURCE_DIR)
INCLUDE_LOCATIONS += $(ROMSX_SOURCE_DIR)

ROMSX_TIMEINT_DIR = $(ROMSX_SOURCE_DIR)/TimeIntegration
include $(ROMSX_TIMEINT_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_TIMEINT_DIR)
INCLUDE_LOCATIONS += $(ROMSX_TIMEINT_DIR)

ROMSX_BC_DIR = $(ROMSX_SOURCE_DIR)/BoundaryConditions
include $(ROMSX_BC_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_BC_DIR)
INCLUDE_LOCATIONS += $(ROMSX_BC_DIR)

ROMSX_INIT_DIR = $(ROMSX_SOURCE_DIR)/Initialization
include $(ROMSX_INIT_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_INIT_DIR)
INCLUDE_LOCATIONS += $(ROMSX_INIT_DIR)

ROMSX_UTIL_DIR = $(ROMSX_SOURCE_DIR)/Utils
include $(ROMSX_UTIL_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_UTIL_DIR)
INCLUDE_LOCATIONS += $(ROMSX_UTIL_DIR)

ROMSX_IO_DIR = $(ROMSX_SOURCE_DIR)/IO
include $(ROMSX_IO_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_IO_DIR)
INCLUDE_LOCATIONS += $(ROMSX_IO_DIR)

include $(ROMSX_PROBLEM_DIR)/Make.package

VPATH_LOCATIONS   += $(ROMSX_PROBLEM_DIR)
INCLUDE_LOCATIONS += $(ROMSX_PROBLEM_DIR)

include $(AMREX_HOME)/Src/Base/Make.package

AMReXdirs             := Base Boundary AmrCore

ifeq ($(USE_HDF5),TRUE)
AMReXdirs             += Extern/HDF5
endif

ifeq ($(USE_PARTICLES),TRUE)
AMReXdirs             += Particle
endif

AMReXpack             += $(foreach dir, $(AMReXdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)

include $(AMReXpack)

ifeq ($(USE_PARTICLES),TRUE)
ROMSX_PARTICLES_DIR = $(ROMSX_SOURCE_DIR)/Particles
include $(ROMSX_PARTICLES_DIR)/Make.package
VPATH_LOCATIONS   += $(ROMSX_PARTICLES_DIR)
INCLUDE_LOCATIONS += $(ROMSX_PARTICLES_DIR)
endif

#turn on NetCDF macro define
ifeq ($(USE_NETCDF), TRUE)
  USERSuffix = .NC
  DEFINES += -DROMSX_USE_NETCDF
  includes += $(shell pkg-config --cflags netcdf)
  LIBRARIES += $(shell pkg-config --libs netcdf)
#  includes += $(shell pkg-config --cflags netcdf-cxx4_parallel)
#  LIBRARIES += $(shell pkg-config --libs netcdf-cxx4_parallel)
endif

ifeq ($(USE_HDF5), TRUE)
  DEFINES += -DROMSX_USE_HDF5
  DEFINES += -DAMREX_USE_HDF5
endif

ifeq ($(USE_PARTICLES), TRUE)
  DEFINES += -DROMSX_USE_PARTICLES
endif

CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS += $(AMREX_HOME)/Tools/C_scripts

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

all: $(executable)
	(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS

AMReX_buildInfo.cpp:
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" \
          --CXX_flags "$(CXXFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --link_flags "$(LINKFLAGS) $(CPPFLAGS) $(includes) $(LDFLAGS)" \
          --libraries "$(FINAL_LIBS)" \
          --MODULES "$(MNAMES)" \
          --GIT "$(ROMSX_HOME) $(AMREX_HOME)"

clean::
	$(SILENT) $(RM) AMReX_buildInfo.cpp
